{
    "collab_server" : "",
    "contents" : "#' Implements Clarke-Wright Savings algorithm to find greedy routes\n#' @param locations -- [ID, X, Y] Node id and X, Y co-ordinates/long, lat \n#' @param demand -- Demand at each node [ID, Demand]\n#' @param DMat -- Provide distance matrix, if you already have computed. Make sure that first row and column of the distance matrix represents distances from depot to all the nodes\n#' @param Vehicle_Capacity -- Vehicle capacity\n#' #' @param method -- Metric to calculate distnace between nodes. Feasible methods for X-Y co-ordinates c(\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" or \"minkowski\"); Feasible methods for Long-Lat c(distCosine, distHaversine). Default: \"euclidean\". Note: Please make sure that, method should be a character only for X-Y co-ordinates not for Long-Lat\n#' @param Constraints -- List of constraints to check. Currently implemented only vehicle capacity constraint\n#' @param type -- Type of savings algorithm. Possible values (\"Parallel\", \"Sequential\"). If you want to build more than one route then we strong recommend you to use \"Parallel\", \"Sequential\" algorithm may end up with infeasible nodes for more than one route. For building one route (assumes infinite vehilce capacity) go for \"Sequential\"\n#' @param Plot -- If you want to plot the final greedy routes. Logical (TRUE or FALSE). Default: TRUE\n#' @param logfile -- If you want to save all routes in each iteration. Logical (TRUE or FALSE). Check \"Results.txt\" or \"Results_Seq.txt\" in your working directory. Default: TRUE\n#' @examples\n#' data(An32k5locations)\n#' locations <- An32k5locations\n#' DMat <- DistMat(locations)\n#' row.names(DMat) <- locations[, 1]\n#' colnames(DMat) <- locations[, 1]\n#' data(An32k5demand)\n#' demand <- An32k5demand\n#' Vehicle_Capacity <- 100\n#' CW_VRP(demand, DMat = DMat, Vehicle_Capacity = Vehicle_Capacity)\n#' @references \n#' [1] Classical Heuristics for Vehicle Routing Problem by Gilbert Laporte and Frederic Semet, October, 1998 (Revised: August, 1999), Les Cahiers du Gerad\n#' @importFrom graphics plot\n#' @import ggplot2\n#' @importFrom ggplot2 ggplot aes geom_path labs annotate\n#' @importFrom stats dist\n#' @importFrom utils capture.output\n#' @export\n\nCW_VRP <- function(demand, locations = NULL, DMat = NULL, Vehicle_Capacity = NULL, method = \"euclidean\", Constraints = c(\"Capacity\"), type = \"Parallel\", Plot = TRUE, logfile = TRUE){\n  if(is.null(locations) & is.null(DMat))\n    stop(\"Please provide either of distance matrix and locations\")\n  if(is.null(DMat)) {\n    DMat <- DistMat(locations)\n    nnodes <- nrow(locations) - 1\n  }else{\n    Plot <- FALSE\n    nnodes <- nrow(DMat) - 1\n  }\n  SMat <- SavingMat(DMat, 1)\n  Sort_Edge <- Sorted_Edges(DMat)\n  Sort_Edge$i <- as.integer(as.character(Sort_Edge$i))\n  Sort_Edge$j <- as.integer(as.character(Sort_Edge$j))\n  Sort_Edge$Saving <- as.numeric(Sort_Edge$Saving)\n  if(type == \"Parallel\"){\n    Greedy_Routes <- CW_Parallel_VRP(Sort_Edge, nnodes = nnodes, logfile = logfile)\n  }else if(type == \"Sequential\"){\n    Greedy_Routes <- CW_Sequential_VRP(Sort_Edge, nnodes = nnodes, logfile = logfile)\n  }\n  cat(\"Total cost: \", Total_Cost(Greedy_Routes), \"\\n\")\n  \n  for(i in 1:length(Greedy_Routes)){\n    Greedy_Routes[[i]] <- c(1, Greedy_Routes[[i]], 1)\n  }\n  \n  if(Plot == TRUE){\n    g <- ggplot(locations[unlist(Greedy_Routes), ], aes_string(x = names(locations)[2], y = names(locations)[3])) + geom_path(lineend = \"round\", linetype = 2, show.legend = TRUE) + labs(title = \"Plot of Greedy Routes\") + annotate(\"text\", x = locations[, 2], y = locations[, 3], label = locations[, 1])\n    plot(g)\n  }\n  return(Greedy_Routes)\n}",
    "created" : 1485061384830.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "198359538",
    "id" : "FF6D6F99",
    "lastKnownWriteTime" : 1485085785,
    "last_content_update" : 1485085785388,
    "path" : "~/Clarke_Wright_Savings_Algo/R/ClarkeWrightSavings.R",
    "project_path" : "R/ClarkeWrightSavings.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}