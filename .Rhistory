devtools::use_data()
load("~/Clarke_Wright_Savings_Algo/data/A-n32-k5-demand.RData")
load("~/Clarke_Wright_Savings_Algo/data/A-n32-k5-locations.RData")
getwd()
rm(demand)
rm(locations)
load(A-n32-k5-demand)
load("A-n32-k5-demand")
load("~/Clarke_Wright_Savings_Algo/data/A-n32-k5-demand.RData")
View(demand)
iplotCurves
demand
An32k5demand <- demand
getwd()
save(An32k5demand, file = "data/An32k5demand.rda")
locations
load("~/Clarke_Wright_Savings_Algo/data/An32k5locations.RData")
locations
An32k5locations <- locations
save(An32k5locations, file = "data/An32k5locations.rda")
load("~/Clarke_Wright_Savings_Algo/data/An32k5demand.rda")
load("~/Clarke_Wright_Savings_Algo/data/An32k5locations.rda")
load("~/Clarke_Wright_Savings_Algo/data/An32k5demand.RData")
library(HeuristicsVRP)
An32k5demand
data(An32k5demand)
library(HeuristicsVRP)
data(An32k5demand)
demand <- data(An32k5demand)
demand
data(An32k5demand)
data("An32k5demand")
demand <- data("An32k5demand")
demand
data()
data(AirPassengers)
AirPassengers
temp <- data(AirPassengers)
temp
library(HeuristicsVRP)
library(HeuristicsVRP)
library(HeuristicsVRP)
?as.data.frame.table
library(HeuristicsVRP)
library(HeuristicsVRP)
An32k5demand
CW_VRP(An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
library(HeuristicsVRP)
CW_VRP(An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
library(HeuristicsVRP)
library(HeuristicsVRP)
CW_VRP(locations = An32k5locations, Constraints = NULL)
library(HeuristicsVRP)
CW_VRP(locations = An32k5locations, Constraints = NULL)
library(HeuristicsVRP)
CW_VRP(locations = An32k5locations, Constraints = NULL)
library(HeuristicsVRP)
CW_VRP(locations = An32k5locations, Constraints = NULL)
Sys.time()
strt <- Sys.time()
Sys.time() - strt
library(HeuristicsVRP)
CW_VRP(locations = An32k5locations, Constraints = NULL)
a <- c("Constraints")
a
?constrOptim()
a <- c("Capacity")
Constraints <- c("Capacity", "a", "b")
Constraints
setdiff(Constraints, "Capacity")
library(HeuristicsVRP)
library(HeuristicsVRP)
library(HeuristicsVRP)
An32k5demand
An32k5demand
knitr::kable(head(mtcars, 10))
kable
head(An32k5demand)
mtcars
data()
data()
An32k5locations
ggplot(An32k5locations, aes(x = An32k5locations$X, y = An32k5locations$Y)) + geom_point()
ggplot(An32k5locations, aes(x = X, y = Y)) + geom_point()
g <- ggplot(An32k5locations, aes(x = X, y = Y))
g
An32k5locations
DistMat()
DistMat
Sorted_Edges
SMat <- SavingMat(DMat = DMat)
DMat <<- DistMat(An32k5locations)
SMat <- SavingMat(DMat = DMat)
SMat <- SavingMat(DMat = DMat)
row.names(SMat) <- NULL
knitr::kable(SMat[1:5, 1:5])
SMat <- SavingMat(DMat = DMat)
knitr::kable(SMat[1:5, 1:5])
SavingMat(DMat = DMat)
knitr::kable(SMat[1:5, 1:5])
SavingMat
library(HeuristicsVRP)
CW_VRP(demand = An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
library(HeuristicsVRP)
CW_VRP(demand = An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
library(HeuristicsVRP)
CW_VRP(demand = An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
CW_VRP(demand = An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
a <- c(1:10)
a == c(1:10)
a == c(2:10)
a == c(2:11)
sum(a == c(2:11))
!sum(a == c(2:11))
!sum(a == c(1:10))
?magic
??magic
simple_triplet_matrix(c(1, 4), c(1, 2), c(1, 2))
slam::simple_triplet_matrix(c(1, 4), c(1, 2), c(1, 2))
slam::simple_triplet_diag_matrix(1:3)
corr
?corr
?cor
cor(An32k5locations)
temp <- cor(An32k5locations)
as.data.frame.table(temp)
abs(cor(An32k5locations))
temp <- as.data.frame.table(temp)
temp <- temp[order(Freq),]
temp <- temp[order(temp$Freq),]
temp
temp$Pos <- ifelse(temp$Freq > 0, 1, 0)
temp
CorData <- temp
CorData$Pos <- ifelse(CorData$Freq > 0, 1, 0)
CorData
CorData$Var1 != CorData$Var2
temp <- cor(An32k5locations)
temp
temp2 <- as.data.frame(temp)
temp2
temp2 <- as.data.frame.table(temp)
temp2
DMat <- dist(An32k5locations[,-1], diag = TRUE, upper = TRUE)
DMat
CW_VRP(DMat = DMat)
traceback()
nrow(DMat)
class(DMat)
DMat <- as.matrix(DMat)
CW_VRP(DMat = DMat)
DMat
row.names(DMat)
row.names(DMat) <- paste("a",row.names(DMat))
row.names(DMat)
colnames(DMat)
colnames(DMat) <- paste("a", colnames(DMat))
colnames(DMat)
CW_VRP(DMat = DMat)
traceback()
library(HeuristicsVRP)
CW_VRP(DMat = DMat)
traceback()
as.character("1")
library(HeuristicsVRP)
CW_VRP(DMat = DMat)
library(HeuristicsVRP)
CW_VRP(DMat = DMat)
CW_VRP(demand = An32k5demand, locations = An32k5locations, Vehicle_Capacity = 100)
temp <- data.frame(OID = paste0("a", c(1:10)), MID = c(1:10))
temp
a <- c(2, 8, 4, 6)
temp[temp$MID %in% a, 1]
which(temp$MID %in% a)
temp[which(temp$MID %in% a), ]
as.character(temp[temp$MID %in% a, 1])
temp2 <- as.character(temp[temp$MID %in% a, 1])
temp2
temp[temp$MID %in% a, ]
temp2 <-temp[temp$MID %in% a, ]
temp2
arrange
subset(temp, MID == a)
subset(temp, MID %in% a)
order(a)
a
sort(a)
sort(a, index = TRUE)
temp2
temp2[order(a), ]
temp2[order(a)[temp2$MID], ]
a
order(a)
temp2
temp3 <- data.frame(a = rep(1, 4), b = rep(2, 4))
temp3
temp3 <- data.frame(a = c(1:4), b = c(2:5))
temp3
temp3[orde(a), ]
temp3[order(a), ]
temp3[order(a), ] <- temp2
temp3
a
temp2 <- as.data.frame(OID = rep(NA, nrow(temp)), MID = NA)
temp2 <- data.frame(OID = rep(NA, nrow(temp)), MID = NA)
temp2
temp
library(HeuristicsVRP)
loc <- An32k5locations
loc
loc$ID <- paste0("a", loc$ID)
CW_VRP(locations = loc)
library(HeuristicsVRP)
CW_VRP(locations = loc)
CW_VRP(locations = An32k5locations)
CW_VRP(locations = An32k5locations, demand = An32k5demand)
CW_VRP(locations = An32k5locations, demand = An32k5demand, Vehicle_Capacity = 100)
?CheckConstraints
library(HeuristicsVRP)
?CheckConstraints
CheckConstraints
library(HeuristicsVRP)
CheckConstraints
library(HeuristicsVRP)
CheckConstraints
?CheckConstraints
CheckConstraints()
library(HeuristicsVRP)
CheckConstraints
library(HeuristicsVRP)
DMat
DistMat
locations <- An32k5locations
locations
locations$ID <- paste0("a.",locations$ID)
locations
DistMat(locations)
DMat <- DistMat(locations)
SavingMat(DMat)
library(HeuristicsVRP)
SavingMat(DMat)
library(HeuristicsVRP)
DMat
SavingMat(DMat)
traceback()
SavingMat(DMat, depot = "a.1")
range
range(10)
seq_len(10)
SavingMat <- function(DMat, depot = 1){
SMat <- matrix(0, nrow = nrow(DMat) - 1, ncol = nrow(DMat) - 1)
# row.names(SMat) <- setdiff(row.names(DMat), as.character(depot))
# colnames(SMat) <- setdiff(row.names(DMat), as.character(depot))
row.names(SMat) <- row.names(DMat)[-1]
colnames(SMat) <- row.names(DMat)[-1]
# for(i in row.names(SMat)){
#   for(j in colnames(SMat)){
#     if(as.numeric(i) < as.numeric(j)){
#       SMat[i, j] = DMat[depot, i] + DMat[depot, j] - DMat[i, j]
#     }
#   }
# }
for(i in seq_len(nrow(SMat))){
for(j in seq_len(ncol(SMat))){
if(as.numeric(i) < as.numeric(j)){
SMat[i, j] = DMat[depot, i] + DMat[depot, j] - DMat[i, j]
}
}
}
return(SMat)
}
SavingMat(DMat)
SavingMat <- function(DMat, depot = 1){
SMat <- matrix(0, nrow = nrow(DMat) - 1, ncol = nrow(DMat) - 1)
# row.names(SMat) <- setdiff(row.names(DMat), as.character(depot))
# colnames(SMat) <- setdiff(row.names(DMat), as.character(depot))
row.names(SMat) <- row.names(DMat)[-1]
colnames(SMat) <- row.names(DMat)[-1]
# for(i in row.names(SMat)){
#   for(j in colnames(SMat)){
#     if(as.numeric(i) < as.numeric(j)){
#       SMat[i, j] = DMat[depot, i] + DMat[depot, j] - DMat[i, j]
#     }
#   }
# }
for(i in seq_len(nrow(SMat))){
for(j in seq_len(ncol(SMat))){
if(i < j){
SMat[i, j] = DMat[depot, i] + DMat[depot, j] - DMat[i, j]
}
}
}
return(SMat)
}
SavingMat(DMat)
SavingMat <- function(DMat, depot = 1){
SMat <- matrix(0, nrow = nrow(DMat) - 1, ncol = nrow(DMat) - 1)
# row.names(SMat) <- setdiff(row.names(DMat), as.character(depot))
# colnames(SMat) <- setdiff(row.names(DMat), as.character(depot))
row.names(SMat) <- row.names(DMat)[-1]
colnames(SMat) <- row.names(DMat)[-1]
# for(i in row.names(SMat)){
#   for(j in colnames(SMat)){
#     if(as.numeric(i) < as.numeric(j)){
#       SMat[i, j] = DMat[depot, i] + DMat[depot, j] - DMat[i, j]
#     }
#   }
# }
for(i in seq_len(nrow(SMat))){
for(j in seq_len(ncol(SMat))){
if(i < j){
SMat[i, j] = DMat[depot, i+1] + DMat[depot, j+1] - DMat[i+1, j+1]
}
}
}
return(SMat)
}
SavingMat(DMat)
View(DMat)
34.928498 + 77.878110 - 60.307545
Sorted_Edges(DMat)
SMat <- SavingMat(DMat, depot = 1)
result <- as.data.frame.table(SMat)
result
colnames(result) <- c("i", "j", "Saving")
result <- result[result$Saving != 0, ]
result <- result[order(result$Saving, decreasing = TRUE), ]
return(result)
Sorted_Edges(DMat)
library(HeuristicsVRP)
Sorted_Edges(DMat)
CW_VRP(locations = locations)
library(HeuristicsVRP)
CW_VRP(locations = locations)
length(NA)
Sort_Edge <- Sorted_Edges(DMat = DMat)
nnodes <- nrow(locations) - 1
Sort_Edge
Served_nodes
Served_nodes = c()
CommonNode <- intersect(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), Served_nodes)
CommonNode
NewNode <- setdiff(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), CommonNode)
NewNode
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
Sort_Edge
CommonNode
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
Sort_Edge[1, 1]
Sort_Edge[1, 2]
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
c(Sort_Edge[1, 1], Sort_Edge[1, 3])
c(Sort_Edge[1, 1], Sort_Edge[1, 5])
dim(Sort_Edge)
View(Sort_Edge)
c(Sort_Edge[1, 10])
locations$ID <- as.character(locations$ID)
NewNode <- setdiff(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), CommonNode)
NewNode
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
Sort_Edge
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
setdiff(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), CommonNode)
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
Sort_Edge[1, 1:2]
Sort_Edge[1, c(1:2)]
unlist(Sort_Edge[1, c(1:2)])
DMat <- DistMat(locations = locations)
Sort_Edge <- Sorted_Edges(DMat)
Sort_Edge[1, c(1:2)]
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
Sort_Edge[1, c(1:2)]
CW_VRP(locations = An32k5locations)
Sort_Edge
class(Sort_Edge$i)
Sort_Edge$i <- as.character(Sort_Edge$i)
Sort_Edge$j <- as.character(Sort_Edge$j)
Sort_Edge[1, c(1:2)]
c(Sort_Edge[1, 1], Sort_Edge[1, 2])
CommonNode <- intersect(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), Served_nodes)
CommonNode
NewNode <- setdiff(c(Sort_Edge[1, 1], Sort_Edge[1, 2]), CommonNode)
NewNode
nCommonNodes <- length(CommonNode)
nCommonNodes
routes[[length(routes) + 1]] <- c(Sort_Edge[1, 1], Sort_Edge[1, 2])
routes = list()
routes[[length(routes) + 1]] <- c(Sort_Edge[1, 1], Sort_Edge[1, 2])
routes
Served_nodes <- unique(c(Served_nodes, c(Sort_Edge[1, 1], Sort_Edge[1, 2])))
Served_nodes
CW_Parallel_VRP(Sort_Edge = Sort_Edge, nnodes = nnodes, demand = NULL, Vehicle_Capacity = NULL)
CW_VRP(locations = locations)
library(HeuristicsVRP)
CW_VRP(locations = locations)
CW_VRP(locations = An32k5locations)
CW_VRP(locations = An32k5locations, demand = An32k5demand, Vehicle_Capacity = 100)
library(HeuristicsVRP)
CW_VRP(locations = locations)
CW_VRP(locations = locations, demand = An32k5demand, Vehicle_Capacity = 100)
temp <- cbind(a = 1:10, b = 1:10)
temp <- as.matrix(temp)
temp
b <- c(1, 3, 5, 2, 6, 1)
a[b, ]
temp[b, ]
temp <- as.data.frame(temp)
temp[b, ]
library(HeuristicsVRP)
CW_VRP(locations = locations)
library(HeuristicsVRP)
CW_VRP(locations = locations)
library(HeuristicsVRP)
CW_VRP(locations = locations)
CW_VRP(locations = locations, demand = An32k5demand)
CW_VRP(locations = locations, demand = An32k5demand, Vehicle_Capacity = 100)
library(HeuristicsVRP)
CW_VRP(locations = locations, demand = An32k5demand)
CW_VRP(locations = locations, demand = An32k5demand, Vehicle_Capacity = 100)
?ggplot
?Constrain
library(HeuristicsVRP)
?CheckConstraints
View(SavingMat)
?locator
interactive()
sub("^([0-9]+|[0-9]+[.][0-9])[0-9]*", "\\1", as.character(unit))
sub("^([0-9]+|[0-9]+[.][0-9])[0-9]*", "\\1")
if (interactive()) {
## Need to write a more sophisticated unit as.character method
unittrim <- function(unit) {
sub("^([0-9]+|[0-9]+[.][0-9])[0-9]*", "\\1", as.character(unit))
}
do.click <- function(unit) {
click.locn <- grid.locator(unit)
grid.segments(unit.c(click.locn$x, unit(0, "npc")),
unit.c(unit(0, "npc"), click.locn$y),
click.locn$x, click.locn$y,
gp=gpar(lty="dashed", col="grey"))
grid.points(click.locn$x, click.locn$y, pch=16, size=unit(1, "mm"))
clickx <- unittrim(click.locn$x)
clicky <- unittrim(click.locn$y)
grid.text(paste0("(", clickx, ", ", clicky, ")"),
click.locn$x + unit(2, "mm"), click.locn$y,
just="left")
}
do.click("inches")
pushViewport(viewport(width=0.5, height=0.5,
xscale=c(0, 100), yscale=c(0, 10)))
grid.rect()
grid.xaxis()
grid.yaxis()
do.click("native")
popViewport()
}
?grid.locator
library(grid)
if (interactive()) {
## Need to write a more sophisticated unit as.character method
unittrim <- function(unit) {
sub("^([0-9]+|[0-9]+[.][0-9])[0-9]*", "\\1", as.character(unit))
}
do.click <- function(unit) {
click.locn <- grid.locator(unit)
grid.segments(unit.c(click.locn$x, unit(0, "npc")),
unit.c(unit(0, "npc"), click.locn$y),
click.locn$x, click.locn$y,
gp=gpar(lty="dashed", col="grey"))
grid.points(click.locn$x, click.locn$y, pch=16, size=unit(1, "mm"))
clickx <- unittrim(click.locn$x)
clicky <- unittrim(click.locn$y)
grid.text(paste0("(", clickx, ", ", clicky, ")"),
click.locn$x + unit(2, "mm"), click.locn$y,
just="left")
}
do.click("inches")
pushViewport(viewport(width=0.5, height=0.5,
xscale=c(0, 100), yscale=c(0, 10)))
grid.rect()
grid.xaxis()
grid.yaxis()
do.click("native")
popViewport()
}
CW_VRP(locations = locations, demand = An32k5demand, Vehicle_Capacity = 100)
if (interactive()) {
## Need to write a more sophisticated unit as.character method
unittrim <- function(unit) {
sub("^([0-9]+|[0-9]+[.][0-9])[0-9]*", "\\1", as.character(unit))
}
do.click <- function(unit) {
click.locn <- grid.locator(unit)
grid.segments(unit.c(click.locn$x, unit(0, "npc")),
unit.c(unit(0, "npc"), click.locn$y),
click.locn$x, click.locn$y,
gp=gpar(lty="dashed", col="grey"))
grid.points(click.locn$x, click.locn$y, pch=16, size=unit(1, "mm"))
clickx <- unittrim(click.locn$x)
clicky <- unittrim(click.locn$y)
grid.text(paste0("(", clickx, ", ", clicky, ")"),
click.locn$x + unit(2, "mm"), click.locn$y,
just="left")
}
do.click("inches")
pushViewport(viewport(width=0.5, height=0.5,
xscale=c(0, 100), yscale=c(0, 10)))
grid.rect()
grid.xaxis()
grid.yaxis()
do.click("native")
popViewport()
}
